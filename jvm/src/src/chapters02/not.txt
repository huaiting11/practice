尚硅谷_02_类加载子系统
1 内存结构概述
2 类加载器与类的加载过程
3 类加载器分类
4 ClassLoader的使用说明
5 双亲委派机制
6 其他

类加载的过程
              加载
1.通过一个类的全限定名获取此类的二进制字节流
2.将这个字节流所代表的静态存储结构转化为方法区运行时数据结构
3.在内存中生成一个代表这个类的java.lang.Class对象，作为方法区类的各种数据的访问入口
               链接
验证
目的在于确保Class文件的字节流中包含信息符当前虚拟机要求，保证被加载类的正确性，不会危害
虚拟机自身安全。
主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证。
准备
为类变量分配内存并且设置该类的默认初始值，即零值
这里不包含用final修饰的static，因为final 在编译的时候就会分配了，准备阶段会显示初始化‘
这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到
java堆中。
解析
将常量池内的符号引用转化为直接引用的过程。
事实上，解析操作往往会伴随着JVM 执行完初始化在执行
                初始化
初始化：
    初始化阶段就是执行类构造器方法<clinit>() 的过程
    此方法不需要定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句
    合并而来的。
    构造器方法中指令中指令原句在源文件中出现的顺序执行。
    <clinit>() 不同于类的构造器，（关联：构造器是虚拟机视角下的<init>()）
    若该类具有父类，JVM 会保证子类的<clinit>() 执行前，父类的<clinit>() 已经执行完毕
    虚拟机必须保证一个类的<clinit>() 方法在多线程下被同步枷锁

5.双亲委派机制
Java 虚拟机对class 文件采用的是按需加载的方式，也就是说当需要使用该类时才会将它的class
文件加载到内存生成class 对象，而且加载某个类的class 文件时，Java虚拟机采用的是 双亲
委派模式，即把请求交由父类处理，它是一种任务委派模式

工作原理：
1） 如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行。
2） 如果父类加载器还存在器父类加载器加载，则进一步向上委托，依次递归，请求最终将达到顶层的启动类加载器
3） 如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试
自己去加载，这就是双亲委派模式。
优势：
  避免类的重复加载
  保护程序安全，防止核心API 被随便篡改
     自定义类：java.lang.String
     自定义类：java.lang.ShkStart

沙箱安全机制
  自定义String类，但是在加载自定义String类的时候回
   率先使用引导类加载器加载
 ，而引导类加载器在加载的过程中会先加载jdk自带的文件（rt.jar/java\lang\
 String.class），报错信息说没有main 方法，就是因为加载的是rt.jar包
 中的String类，这样可以保证对java 核心源代码的保护，这就是沙箱安全机制

 其他：
 如果一个类型是由用户类加载器加载的，那么jvm 会将这个类加载器的一个引用
 作为类型的一部分保存在方法区中，当解析一个类型到另一个类型的引用的时候，jvm
 需要保证这两个类型的类加载器是相同的。

 Java 程序对类的使用方式分为： 主动使用和被动使用。
   主动使用，又分为七种情况：
      创建类的实例
      访问某个类或接口的静态变量，或者对该静态变量赋值
      调用类的静态方法
      反射：（比如 Class.forName("com.atguigu.Test")）
      初始化一个类的子类
      Java 虚拟机启动时 被标明 为启动类的类。
      JDK 7 开始提供的动态语言支持：
        java.lang.invoke.MethodHandle 实例的解析结果

   除了以上七种情况，其他使用Java 类的方式都被看作对类的被动引用，
   都不会导致类的初始化。


