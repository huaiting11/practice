package dfsbfs;

import java.util.*;

/**
 * 给定两个单词（beginWord?和 endWord）和一个字典，找到从?beginWord 到?endWord 的最短转换序列的长度。转换需遵循如下规则：
 *
 * 每次转换只能改变一个字母。
 * 转换过程中的中间单词必须是字典中的单词。
 * 说明:
 *
 * 如果不存在这样的转换序列，返回 0。
 * 所有单词具有相同的长度。
 * 所有单词只由小写字母组成。
 * 字典中不存在重复的单词。
 * 你可以假设 beginWord 和 endWord 是非空的，且二者不相同。
 *
 * 输入:
 * beginWord = "hit",
 * endWord = "cog",
 * wordList = ["hot","dot","dog","lot","log","cog"]
 *
 * 输出: 5
 *
 * 解释: 一个最短转换序列是 "hit" -> "hot" -> "dot" -> "dog" -> "cog",
 *      返回它的长度 5。

 */
public class Q127_1 {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set dic = new HashSet(wordList);
        Queue<String> queue = new LinkedList<>();
        queue.add(beginWord);
        int level = 0;
        while (!queue.isEmpty()){
            int len = queue.size();
            for (int i = 0; i < len; i++) {
                String temp = queue.poll();
                if(temp.equals(endWord)){
                    return level+1;
                }
                for (int j = 0; j < temp.length(); j++) {
                    char[] chars = temp.toCharArray();
                    for (char  k = 'a'; k <= 'z'  ; k++) {
                        chars[j] = k;
                        String check = new String(chars);
                        if(dic.contains(check) && !check.equals(temp)){
                            queue.add(check);
                            dic.remove(check);
                        }
                    }
                }
            }
            level++;
        }
        return 0;
    }
}
